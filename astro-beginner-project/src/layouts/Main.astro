---
import "../styles/global.css";
import "noto-sans-sc/noto_sans_sc_regular/css.css";
import Footer from "../components/Footer.astro";
import NavigationBar from "../components/NavigationBar.astro";

// To enforce Typescript checks, define the Props type alias or interface.
type Props = {
  title: string;
};
const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {/* Add a new meta description tag */}
    <meta name="description" content="Sgal Cheung's website" />
    {/* Title is hardcoded as Astro, for now. */}
    <title>{title}</title>

    <!-- 👀 add is:inline -->
    <!-- 
      Imports will not be processed 
      Typescript not supported by default 
      Script will be added as is, e.g., multiple times if the component is used more than once on a page. 
    -->
    <!-- is:inline 在网络慢的时候，解决主题闪烁问题，解除 script 非阻塞特性，也就是会阻塞 -->
    <script is:inline>
      console.log("is:inline");
      /** Represent the toggle theme class with a variable */
      const DARK_THEME_CLASS = "dark";
      /** Represent the local storage key by a variable */
      const COLOUR_MODE = "COLOUR_MODE";
      /** Represent the local storage values by variables */
      const LIGHT_THEME = "LIGHT";
      const DARK_THEME = "DARK";

      const rootEl = document.documentElement;

      const getInitialColourMode = () => {
        /** Get colour mode from local storage **/
        const previouslySavedColourMode =
          window.localStorage.getItem(COLOUR_MODE);
        if (previouslySavedColourMode) {
          return previouslySavedColourMode;
        }
        /** Does the user prefer dark mode, e.g., through an operating system or user agent setting? */
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return DARK_THEME;
        }
        /** Default to the light theme */
        return LIGHT_THEME;
      };
      /** Get initial colour mode */
      const initialColourMode = getInitialColourMode();
      // 👀 remove string type on mode
      // const setInitialColourMode = (mode: string) => {
      const setInitialColourMode = (mode) => {
        if (mode === LIGHT_THEME) {
          rootEl.classList.remove(DARK_THEME_CLASS);
        } else {
          rootEl.classList.add(DARK_THEME_CLASS);
        }
      };
      /** Set the initial colour mode as soon as the script is executed */
      setInitialColourMode(initialColourMode);
    </script>
  </head>
  <body>
    <main>
      <button> Donate to charity </button>
      <NavigationBar />

      {/* We want the content of each page to go here */}
      <slot />

      <Footer />
    </main>
  </body>
</html>
